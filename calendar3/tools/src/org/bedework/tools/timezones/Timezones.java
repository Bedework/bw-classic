/*
 Copyright (c) 2000-2005 University of Washington.  All rights reserved.

 Redistribution and use of this distribution in source and binary forms,
 with or without modification, are permitted provided that:

   The above copyright notice and this permission notice appear in
   all copies and supporting documentation;

   The name, identifiers, and trademarks of the University of Washington
   are not used in advertising or publicity without the express prior
   written permission of the University of Washington;

   Recipients acknowledge that this distribution is made available as a
   research courtesy, "as is", potentially with defects, without
   any obligation on the part of the University of Washington to
   provide support, services, or repair;

   THE UNIVERSITY OF WASHINGTON DISCLAIMS ALL WARRANTIES, EXPRESS OR
   IMPLIED, WITH REGARD TO THIS SOFTWARE, INCLUDING WITHOUT LIMITATION
   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
   PARTICULAR PURPOSE, AND IN NO EVENT SHALL THE UNIVERSITY OF
   WASHINGTON BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
   PROFITS, WHETHER IN AN ACTION OF CONTRACT, TORT (INCLUDING
   NEGLIGENCE) OR STRICT LIABILITY, ARISING OUT OF OR IN CONNECTION WITH
   THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/* **********************************************************************
    Copyright 2005 Rensselaer Polytechnic Institute. All worldwide rights reserved.

    Redistribution and use of this distribution in source and binary forms,
    with or without modification, are permitted provided that:
       The above copyright notice and this permission notice appear in all
        copies and supporting documentation;

        The name, identifiers, and trademarks of Rensselaer Polytechnic
        Institute are not used in advertising or publicity without the
        express prior written permission of Rensselaer Polytechnic Institute;

    DISCLAIMER: The software is distributed" AS IS" without any express or
    implied warranty, including but not limited to, any implied warranties
    of merchantability or fitness for a particular purpose or any warrant)'
    of non-infringement of any current or pending patent rights. The authors
    of the software make no representations about the suitability of this
    software for any particular purpose. The entire risk as to the quality
    and performance of the software is with the user. Should the software
    prove defective, the user assumes the cost of all necessary servicing,
    repair or correction. In particular, neither Rensselaer Polytechnic
    Institute, nor the authors of the software are liable for any indirect,
    special, consequential, or incidental damages related to the software,
    to the maximum extent the law permits.
*/
package org.bedework.tools.timezones;

import java.io.File;
import java.io.FileFilter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.LineNumberReader;
import java.io.Writer;
import org.apache.log4j.Logger;

/** Takes timezones as generated by vciz and converts to an xml representation
 * for input via the admin tool
 */
public class Timezones {
  private boolean debug;

  private String dirName;
  private String outName;

  private File inDir;
  private Writer out;

  private transient Logger log;

  class IsDirFilter implements FileFilter {
    public boolean accept(File pathname) {
      return pathname.isDirectory();
    }
  }

  class IsIcsFileFilter implements FileFilter {
    public boolean accept(File pathname) {
      if (!pathname.isFile()) {
        return false;
      }

      String nm = pathname.getName();

      return (nm.length() > 4) && (nm.endsWith(".ics"));
    }
  }

  void open() throws Throwable {
    if (dirName == null) {
      error("Must supply -dir dirname");
      usage();
      throw new Exception("Must supply -dir dirname");
    }

    if (outName == null) {
      error("Must supply -f name");
      usage();
      throw new Exception("Must supply -f name");
    }

    inDir = new File(dirName);
    out = new FileWriter(outName);
  }

  void doConversion() throws Throwable {
    convertDir(inDir, "");
  }

  void close() throws Throwable {
    out.close();
  }

  void stats() throws Throwable {
  }

  void convertDir(File dir, String indent) throws Throwable {
    if (debug) {
      trace("Dir: " + dir.getName());
    }

    out.write(indent);
    out.write("<dir>\n");

    String svIndent = indent;
    indent += "  ";
    out.write(indent);
    out.write("<name>");
    out.write(dir.getName());
    out.write("</name>\n");

    /* Do directories first */
    File[] dirs = dir.listFiles(new IsDirFilter());
    if (dirs != null) {
      for (int di = 0; di < dirs.length; di++) {
        convertDir(dirs[di], indent + "  ");
      }
    }

    /* Do ics files */
    File[] icss = dir.listFiles(new IsIcsFileFilter());
    if (icss != null) {
      for (int fi = 0; fi < icss.length; fi++) {
        convertFile(icss[fi], indent + "  ");
      }
    }

    indent = svIndent;
    out.write("</dir>\n");
  }

  void convertFile(File ics, String indent) throws Throwable {
    if (debug) {
      trace("File: " + ics.getName());
    }

    out.write(indent);
    out.write("<file>\n");

    String svIndent = indent;
    indent += "  ";
    out.write(indent);
    out.write("<name>");
    out.write(ics.getName());
    out.write("</name>\n");

    out.write(indent);
    out.write("<data><![CDATA[");

    FileReader frdr = new FileReader(ics);
    LineNumberReader rdr = new LineNumberReader(frdr);

    for (;;) {
      String ln = rdr.readLine();

      if (ln == null) {
        break;
      }

      out.write(ln);
      out.write("\n");
    }

    frdr.close();

    out.write(indent);
    out.write("]]></data>\n");

    indent = svIndent;
    out.write("</file>\n");
  }

  boolean processArgs(String[] args) throws Throwable {
    if (args == null) {
      return true;
    }

    for (int i = 0; i < args.length; i++) {
      if (args[i].equals("-debug")) {
        debug = true;
      } else if (args[i].equals("-ndebug")) {
        debug = false;
      } else if (argpar("-dir", args, i)) {
        i++;
        dirName = args[i];
      } else if (argpar("-f", args, i)) {
        i++;
        outName = args[i];
      } else {
        error("Illegal argument: " + args[i]);
        usage();
        return false;
      }
    }

    return true;
  }

  void usage() {
    System.out.println("Usage:");
    System.out.println("args   -debug");
    System.out.println("       -ndebug");
    System.out.println("       -f filename");
    System.out.println("            define name of output file");
    System.out.println("       -dir dirname");
    System.out.println("            directory containing timezone defs");
    System.out.println("");
  }

  boolean argpar(String n, String[] args, int i) throws Exception {
    if (!args[i].equals(n)) {
      return false;
    }

    if ((i + 1) == args.length) {
      throw new Exception("Invalid args");
    }
    return true;
  }

  protected Logger getLog() {
    if (log == null) {
      log = Logger.getLogger(this.getClass());
    }

    return log;
  }

  protected void error(String msg) {
    getLog().error(msg);
  }

  protected void trace(String msg) {
    getLog().debug(msg);
  }

  /** Main
   *
   * @param args
   */
  public static void main(String[] args) {
    Timezones tzs = null;

    try {
      tzs = new Timezones();

      if (!tzs.processArgs(args)) {
        return;
      }

      tzs.open();

      tzs.doConversion();

      tzs.close();

      tzs.stats();
    } catch (Throwable t) {
      t.printStackTrace();
    } finally {
      try {
        tzs.close();
      } catch (Throwable t1) {
        t1.printStackTrace();
      }
    }
  }
}


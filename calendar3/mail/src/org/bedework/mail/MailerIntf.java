/*
 Copyright (c) 2000-2005 University of Washington.  All rights reserved.

 Redistribution and use of this distribution in source and binary forms,
 with or without modification, are permitted provided that:

   The above copyright notice and this permission notice appear in
   all copies and supporting documentation;

   The name, identifiers, and trademarks of the University of Washington
   are not used in advertising or publicity without the express prior
   written permission of the University of Washington;

   Recipients acknowledge that this distribution is made available as a
   research courtesy, "as is", potentially with defects, without
   any obligation on the part of the University of Washington to
   provide support, services, or repair;

   THE UNIVERSITY OF WASHINGTON DISCLAIMS ALL WARRANTIES, EXPRESS OR
   IMPLIED, WITH REGARD TO THIS SOFTWARE, INCLUDING WITHOUT LIMITATION
   ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
   PARTICULAR PURPOSE, AND IN NO EVENT SHALL THE UNIVERSITY OF
   WASHINGTON BE LIABLE FOR ANY SPECIAL, INDIRECT OR CONSEQUENTIAL
   DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR
   PROFITS, WHETHER IN AN ACTION OF CONTRACT, TORT (INCLUDING
   NEGLIGENCE) OR STRICT LIABILITY, ARISING OUT OF OR IN CONNECTION WITH
   THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
/* **********************************************************************
    Copyright 2005 Rensselaer Polytechnic Institute. All worldwide rights reserved.

    Redistribution and use of this distribution in source and binary forms,
    with or without modification, are permitted provided that:
       The above copyright notice and this permission notice appear in all
        copies and supporting documentation;

        The name, identifiers, and trademarks of Rensselaer Polytechnic
        Institute are not used in advertising or publicity without the
        express prior written permission of Rensselaer Polytechnic Institute;

    DISCLAIMER: The software is distributed" AS IS" without any express or
    implied warranty, including but not limited to, any implied warranties
    of merchantability or fitness for a particular purpose or any warrant)'
    of non-infringement of any current or pending patent rights. The authors
    of the software make no representations about the suitability of this
    software for any particular purpose. The entire risk as to the quality
    and performance of the software is with the user. Should the software
    prove defective, the user assumes the cost of all necessary servicing,
    repair or correction. In particular, neither Rensselaer Polytechnic
    Institute, nor the authors of the software are liable for any indirect,
    special, consequential, or incidental damages related to the software,
    to the maximum extent the law permits.
*/
package org.bedework.mail;

import org.bedework.calfacade.BwCalendar;
import org.bedework.calfacade.BwUser;
import org.bedework.calfacade.CalFacadeException;
import org.bedework.calsvci.CalSvcI;

import java.io.Serializable;
import java.util.Collection;

/** From within the calendar system we have the following mailing needs:
 *
 * <ul><li>When an event is added/changed/deleted mail the chnage to all
 * subscribers to that events calendar.</li>
 *
 * <li>When an email alarm fires, mail something, including the event, to the
 * alarm receiver</li>
 * </ul>
 *
 * <p>Ove time other needs may present themselves.</p>
 *
 * <p>The subscribed case can be thought of as a mailing list. For each calendar,
 * we have a list of subscribers who want events emailed. When a change occurs to
 * the calendar we send the message out on the list. This interface allows
 * implementors to use a list server to handle the, possibly large amount of,
 * mail generated by this system.
 *
 * <p>The second case is less easily optimized. Each email is unique in content
 * and usually has only one recipient.
 *
 * <p>In both cases it is useful to have some sort of mechanism for determining
 * bad addresses. List servers often have their own mechanisms which usually
 * result in a recipient being eventually deleted from the list. Thsi interface
 * allows the calendar system to query the state of a given recipient on the
 * list.
 *
 * <p>Because we are probably interfacing to a system which identifies users
 * solely by their email-address, we have to give that system the chance to
 * update itself correctly when the users email is changed. We present the
 * new address to the system as well as the old one.
 *
 * @author Mike Douglass douglm@rpi.edu
 */
public interface MailerIntf extends Serializable {
  /**
   * @param svci
   * @param debug
   * @throws CalFacadeException
   */
  public void init(CalSvcI svci, boolean debug) throws CalFacadeException;

  /** Add a list corresponding to the given calendar.
   *
   * @param cal
   * @throws CalFacadeException
   */
  public void addList(BwCalendar cal) throws CalFacadeException;

  /** Delete a list corresponding to the given calendar.
   *
   * @param cal
   * @throws CalFacadeException
   */
  public void deleteList(BwCalendar cal) throws CalFacadeException;

  /** Return a collection of mail list ids
   *
   * @return collection of mail list ids
   * @throws CalFacadeException
   */
  public Collection listLists() throws CalFacadeException;

  /** Check a list corresponding to the given calendar exists.
   *
   * @param cal
   * @return true if list exists
   * @throws CalFacadeException
   */
  public boolean checkList(BwCalendar cal) throws CalFacadeException;

  /** Post a  message to the list corresponding to the given calendar.
   *
   * @param cal
   * @param val
   * @throws CalFacadeException
   */
  public void postList(BwCalendar cal, Message val) throws CalFacadeException;

  /** Add a user to the list corresponding to the given calendar.
   *
   * @param cal
   * @param user
   * @throws CalFacadeException
   */
  public void addUser(BwCalendar cal, BwUser user) throws CalFacadeException;

  /** Remove a user from the list corresponding to the given calendar.
   *
   * @param cal
   * @param user
   * @throws CalFacadeException
   */
  public void removeUser(BwCalendar cal, BwUser user) throws CalFacadeException;

  /** Check a user is on the list corresponding to the given calendar.
   *
   * @param cal
   * @param user
   * @return boolean
   * @throws CalFacadeException
   */
  public boolean checkUser(BwCalendar cal, BwUser user) throws CalFacadeException;

  /** Update a users email address on the list corresponding to the given calendar.
   *
   * @param cal
   * @param user
   * @param newEmail
   * @throws CalFacadeException
   */
  public void updateUser(BwCalendar cal, BwUser user, String newEmail)
        throws CalFacadeException;

  /** List users on the list corresponding to the given calendar. This requires
   * that the implementation has access to the database to match emails against
   * users.
   *
   * @param cal
   * @return Collection
   * @throws CalFacadeException
   */
  public Collection listUsers(BwCalendar cal) throws CalFacadeException;

  /**
   * @param val
   * @throws CalFacadeException
   */
  public void post(Message val) throws CalFacadeException;
}


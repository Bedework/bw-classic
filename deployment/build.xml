<?xml version="1.0"?>

<!-- ===================== Deployment build file =======================
     This directory and the files within it are to be part of the config
     and deployment process.

     A number of properties of the form org.bedework.install.XXX will be
     defined, each indicating that a particualr component is to be deployed.

     Targets below will be executed only if that property is defined.

     Adding a new configuration, e.g. a different portal platform, requires
     the steps:
        Create a subdirectory in each components subdirectory,
        e.g.  webadmin/myportal

        Create any other required resource directories and resources and
        create a build.xml file to configure and package the component(s).

        Update the config program to load, save and display the new
        properties for that configuration.

        Add an antcall for each component and a corresponding target

     Authors: Mike Douglass   douglm@rpi.edu
     =================================================================== -->

<project name="deploy.bedework" default="init">
  <property name="base.name" value="deployment"/>

  <property name="org.bedework.temp.wars.home"
            location="${org.bedework.temp.dir}/wars" />

  <property name="org.bedework.temp.shellscr.home"
            location="${org.bedework.temp.dir}/shellscr" />

  <!-- Recreateed by each app build file. Place extra jars here -->
  <property name="org.bedework.temp.extrajars.dir"
            location="${org.bedework.temp.dir}/extrajars" />

  <dirname property="this.build.dir" file="${ant.file}"/>
  <property name="bedework.deployment.base" location="this.build.dir" />

  <import file="${build.dir}/getJar.xml"/>

  <import file="${this.build.dir}/appjars.xml" />

  <import file="${build.dir}/loadDeployConfig.xml"/>

  <target name="init" >
    <getAppJars />

    <property name="source.home" location="${this.build.dir}/src"/>

    <loadDeployConfig />

    <!-- ==================== config properties =========================
    <property name="org.bedework.config.properties"
              location="${org.bedework.config.base}/configs/democal.properties" />
    <property name="org.bedework.config.options"
              location="${org.bedework.config.base}/configs/democal.options.xml" />

    <echo message="==========================================================" />
    <echo message="Use config properties ${org.bedework.config.properties}" />
    <loadproperties srcFile="${org.bedework.config.properties}" >
      <filterchain>
        <expandproperties/>
      </filterchain>
    </loadproperties>
-->

    <!-- default to debug off -->
    <property name="app.debug.val" value="0" />

    <!-- set this for the war builds -->
    <dirname property="app.root.dir" file="${ant.file}"/>

    <!-- Common resources directory -->
    <property name="org.bedework.common.resources"
              location="${app.root.dir}/resources" />

    <if>
      <not>
        <isset property="org.bedework.global.context.roots" />
      </not>
      <then>
        <tempfile property="org.bedework.global.context.roots"
                  destdir="${org.bedework.temp.dir}"
                  prefix="context-roots" suffix=".properties" />
      </then>
    </if>
  </target>

  <target name="deftasks" depends="init">
    <path id="app.xml.cp">
      <pathelement location="${org.bedework.deployutil.jar}"/>
    </path>

    <taskdef name="forEachApp"
             classname="org.bedework.deployment.ForEachAppTask">
      <classpath refid="app.xml.cp"/>
    </taskdef>

    <taskdef name="resolveFile"
             classname="org.bedework.deployment.ResolveFile">
      <classpath refid="app.xml.cp"/>
    </taskdef>

    <taskdef name="makeLangXsl"
             classname="org.bedework.deployment.MakeLangXsl">
      <classpath refid="app.xml.cp"/>
    </taskdef>
  </target>

  <target name="build.configured" depends="deftasks" >
    <!-- Clean up before we start -->
    <delete dir="${org.bedework.temp.wars.home}" />

    <antcall target="build.standalone.apps" inheritrefs="true" />

    <antcall target="build.portal.apps" inheritrefs="true" />

    <antcall target="build.j2ee.apps" inheritrefs="true" />
  </target>

  <!-- =================================================================
       Targets called by the build.configured target. Each is conditional on a
       config property and each executes a build file in a subdirectory of
       this component.
       ================================================================= -->

  <target name="build.standalone.apps" if="org.bedework.global.build.standalone.app" >
    <!-- ======================= webconfig - only standalone =================
    <ant antfile="${org.bedework.deployment.base}/webconfig/webapp/build.xml"
         inheritrefs="true" target="build.configured" />
          -->

    <property name="org.bedework.deploy.kind" value="webapp" />
    <antcall target="build.configured.apps" inheritrefs="true" />
  </target>

  <target name="build.portal.apps" if="org.bedework.global.portal.platform" >
    <property name="org.bedework.deploy.kind"
              value="${org.bedework.global.portal.platform}" />
    <antcall target="build.configured.apps" inheritrefs="true" />
  </target>

  <target name="build.j2ee.apps" if="org.bedework.global.j2ee.platform" >
    <property name="org.bedework.deploy.kind"
              value="${org.bedework.global.j2ee.platform}" />
    <antcall target="build.configured.apps" inheritrefs="true" />
  </target>

  <!-- =================================================================
                         The deploy target.
       ================================================================= -->

  <target name="deploy" depends="deftasks" >
    <!-- Clean up before we start -->
    <delete dir="${org.bedework.temp.wars.home}" />

    <property name="org.bedework.lang.properties"
              location="${org.bedework.project.calendarapi}/calFacade/resources/org/bedework/locale/resources" />

    <property name="org.bedework.xsllang.dir"
              location="${org.bedework.temp.dir}/xsllang" />

    <delete dir="${org.bedework.xsllang.dir}"/>
    <mkdir dir="${org.bedework.xsllang.dir}"/>

    <makeLangXsl dir="${org.bedework.lang.properties}"
                 prefix="BwResources"
                 resdir="${org.bedework.xsllang.dir}"
                 xsldir="${org.bedework.xsllang.dir}"
                 name="org.bedework.locales"
                 check="true" />

    <echo message="LLLLLLLLLLLLLLLLLLLL locales=${org.bedework.locales}" />

    <!--<antcall target="deploy.standalone.apps" inheritrefs="true" />-->
    <if>
      <isset property="org.bedework.global.build.standalone.app" />
      <then>
        <antcall target="deploy.apps" inheritrefs="true" >
          <param name="org.bedework.deploy.kind" value="webapp" />
        </antcall>
      </then>
    </if>

    <!--<antcall target="deploy.shellscr.apps" inheritrefs="true" />-->
    <!-- Always build the shellscr stuff.-->
    <antcall target="deploy.apps" inheritrefs="true" >
      <param name="org.bedework.deploy.kind" value="shellscr" />
    </antcall>

    <!-- <antcall target="deploy.portal.apps" inheritrefs="true" />-->
    <if>
      <isset property="org.bedework.global.portal.platform" />
      <then>
        <antcall target="deploy.apps" inheritrefs="true" >
          <param name="org.bedework.deploy.kind"
                 value="${org.bedework.global.portal.platform}" />
        </antcall>
      </then>
    </if>

    <!-- <antcall target="deploy.j2ee.apps" inheritrefs="true" />-->
    <if>
      <isset property="org.bedework.global.j2ee.platform" />
      <then>
        <antcall target="deploy.apps" inheritrefs="true" >
          <param name="org.bedework.deploy.kind"
                 value="${org.bedework.global.j2ee.platform}" />
        </antcall>
      </then>
    </if>

    <!-- copy startup website that sends you to the applications -->
    <delete dir="${webapp.root.dir}/bedework"/>
    <mkdir dir="${webapp.root.dir}/bedework"/>
    <copy todir="${webapp.root.dir}/bedework">
      <fileset dir="${app.root.dir}/resources/bedework"/>
    </copy>

    <!-- copy libs that the application server needs -->
    <antcall target="deploy.appserver.jdbcdriver" inheritrefs="true" />
    <antcall target="deploy.appserver.javatools" inheritrefs="true" />
  </target>

  <!-- =================================================================
       Targets called by the deploy target. Each is conditional on a
       config property and each executes a build file in a subdirectory of
       this component.
       ================================================================= -->

  <!-- The cp.xalan task conditionally copies the xalan.jar file, if
       necessary -->
  <target name="cp.xalan" if="xalan.in.tomcat.common.endorsed">
    <copy file="${org.bedework.default.lib}/xalan.jar"
          todir="${appserver.endorsed.dir}"/>
  </target>

  <target name="deploy.appserver.jdbcdriver"
          if="appserver.jdbcdriver.jar" >
    <!-- copy jdbc jar so datasources work -->
    <copy todir="${appserver.lib.dir}" file="${appserver.jdbcdriver.jar}"/>
  </target>

  <target name="deploy.appserver.javatools"
          if="java.tools.jar" >
    <!-- copy tools jar so jsps work -->
    <copy todir="${appserver.lib.dir}" file="${java.tools.jar}"/>
  </target>

  <!-- =================================================================
       Targets called by the build.configured target. Each is conditional on a
       config property and each executes a build file in a subdirectory of
       this component.
       ================================================================= -->
  <target name="build.configured.apps">
    <forEachApp names="${org.bedework.install.app.names}"
                prefix="org.bedework.deploy"
                appPrefix="org.bedework.app"
                projectPrefix="org.bedework.project">
      <sequential>
        <available file="${org.bedework.deploy.type.dir}/${org.bedework.deploy.kind}/build.xml"
                   property="app.kind.available" />
        <antcall target="build.available.configured.app" inheritrefs="true" />
      </sequential>
    </forEachApp>

    <!-- ======================= termination tasks ================= -->
    <!--
    <property name="org.bedework.deploy.type.dir"
              location="${org.bedework.deployment.base}/termination" />
              -->

    <ant antfile="${org.bedework.deployment.base}/termination/build.xml"
         inheritrefs="true" target="build.configured" />
  </target>

  <target name="build.available.configured.app" if="app.kind.available">
    <!-- Pick out the application build properties based on the prefix "org.bedework.app."
         and the deployment name -->
    <propertyset id="build-app-properties">
      <propertyref prefix="org.bedework.app.${org.bedework.deploy.name}"/>
      <globmapper from="org.bedework.app.${org.bedework.deploy.name}.*" to="propval.app.*"/>
    </propertyset>
  </target>

  <target name="deploy.apps">
    <forEachApp names="${org.bedework.install.app.names}"
                prefix="org.bedework.deploy"
                appPrefix="org.bedework.app"
                projectPrefix="org.bedework.project">
      <sequential>
        <antcall target="deploy.available.app" inheritrefs="true" />
      </sequential>
    </forEachApp>

    <!-- ======================= termination tasks ================= -->

    <ant antfile="${org.bedework.deployment.base}/termination/${org.bedework.deploy.kind}/build.xml"
         inheritrefs="true" target="deploy" />
  </target>

  <target name="deploy.available.app">
    <if>
      <available file="${org.bedework.deploy.type.dir}/${org.bedework.deploy.kind}/build.xml"/>
      <then>
        <propertyset id="deploy-app-properties">
          <propertyref prefix="org.bedework.app.${org.bedework.deploy.name}"/>
          <globmapper from="org.bedework.app.${org.bedework.deploy.name}.*" to="propval.app.*"/>
        </propertyset>

        <ant antfile="${org.bedework.deploy.type.dir}/${org.bedework.deploy.kind}/build.xml"
             inheritrefs="true" target="deploy" >
          <propertyset refid="deploy-app-properties" />
        </ant>
      </then>
    </if>
  </target>
</project>


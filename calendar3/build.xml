<?xml version="1.0"?>

<!-- This is the main build file for bedework which can be used in
     conjunction with Ant (http://jakarta.apache.org/ant/) to
     build, deploy, and distribute the bedework calendar project. Type
     "ant -projecthelp" to see a list of ant targets.

     The assumption is that deployers of the calendar will want to create
     a number of independent calendar applications managed by different
     groups.

     To facilitate this the build process is driven by a set of properties
     in config/configs.

     You shouldn't need to modify base files or applications. Instead,
     modify the application specific properties and html/jsp pages to create
     a customized application.

     Authors: Mike Douglass   douglm@rpi.edu
-->

<project name="bedework" default="bld.all">
  <!-- ==================== Basic property Definitions =================
      Each of the following properties are used in the build script.
      Values for these properties are set by the first place they are
      defined, from the following list:
      * Definitions on the "ant" command line (ant -Ddeploy.home=xyz compile)
      * Definitions from a "bedework.build.properties" file in the developer's
        home directory
      * Default definitions in this build.xml file

      You will note below that property values can be composed based on the
      contents of previously defined properties.  This is a powerful
      technique that helps you minimize the number of changes required when
      your development environment is modified.
       ================================================================= -->

  <!-- This may already be set from calling dir -->
  <dirname property="org.bedework.calendar.dir" file="${ant.file}"/>

  <property name="org.bedework.globaldefs.file"
            location="${org.bedework.calendar.dir}/bldfiles/globalDefs.xml"/>
  <import file="${org.bedework.globaldefs.file}"/>

  <!-- =================================================================
       init:  all the property defs are in bldfiles/globalDdefs.xml
       ================================================================= -->

  <target name="init" depends="globalDefs">
    <!-- ==================== config properties ========================= -->
    <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    <property name="org.bedework.config.properties"
              location="${org.bedework.config.base}/configs/${org.bedework.clone.name}.properties" />
    <property name="org.bedework.config.options"
              location="${org.bedework.config.base}/configs/${org.bedework.clone.name}.options.xml" />

    <echo message="==========================================================" />
    <echo message="Use config properties ${org.bedework.config.properties}" />
    <loadproperties
          srcFile="${org.bedework.config.properties}" >
      <filterchain>
        <expandproperties/>
      </filterchain>
    </loadproperties>
  </target>

  <!-- =================================================================
       The "all" target does a complete clean rebuild of all applications.
       ================================================================= -->

  <target name="all" depends="init,clean,dist"
          description="Clean build and dist"/>

  <!-- ======================== Clean Target ===========================
       The "clean" target deletes any generated directories, to ensure
       applications are built from scratch.
       ================================================================= -->

  <target name="clean" depends="init"
          description="Delete generated directories">
    <delete dir="${org.bedework.temp.home}"/>
    <delete dir="${dist.home}"/>
    <delete>
      <fileset dir="." includes="junit*.properties" />
      <fileset dir="." includes="test.log*" />
    </delete>
  </target>

<!-- ===================== bld.all Target ===============================
  This target builds jar files ready for the deploy target.
     =================================================================== -->

  <target name="bld.all"
          depends="bld.locale,bld.davdefs,bld.calfacade,
                   bld.calenv,bld.ical,bld.core,
                   bld.http,
                   bld.calsvci,bld.mail,bld.logging,
                   bld.calsvc,bld.appcommon,bld.uportal,
                   bld.webadmin,bld.webclient,bld.synchml,
                   bld.caldav,bld.caldavclientapi,
                   bld.caldavBexchange,bld.caldavDomino,bld.caldavGoogle,
                   bld.caldavTest,
                   bld.timers,build.tools,
                   bld.dumprestore,
                   bld.test,bld.config"
          description="Build war and ear files">
    <antcall inheritrefs="true" target="copy.to.jars.repository" />
  </target>

  <target name="copy.to.jars.repository" if="org.bedework.jars.repository">
    <mkdir dir="${org.bedework.jars.repository}" />

    <copy todir="${org.bedework.jars.repository}" >
      <fileset dir="${org.bedework.temp.jars}">
        <include name="*-${product.version}.jar"/>
      </fileset>
    </copy>
  </target>

<!-- ===================== Deploy Target ===============================
     The "deploy" target builds configured war files and zipped runnable
     application based on the configuration properties. It then copies the
     contents of the build directory into the locations required by our
     servlet container, and picks up any external dependencies along the way.

     After restarting the servlet container, you can then test bedework.

     To build a version for your site you should probably copy and modify the
                  config/configs/democal.properties
     file and change the value of org.bedework.clone.name to the name of your
     new clone.

     To build more than  one appsuite duplicate the ant task
     invocation below with a different clone name in each.
     =================================================================== -->

  <target name="deploy.debug" depends="bld.all,deploy.log4j.xml"
          description="Deploy applications to servlet container" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="deploy"  >
      <property name="app.debug.val" value="9" />
    </ant>
  </target>

  <target name="deploy" depends="bld.all,deploy.log4j.xml"
          description="Deploy applications to servlet container" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="deploy"  >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

  <!-- nobuild targets for quickstart so bld isn't executed twice -->
  <target name="deploy.debug.nobuild" depends="init,deploy.log4j.xml"
          description="Deploy applications to servlet container" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="deploy"  >
      <property name="app.debug.val" value="9" />
    </ant>
  </target>

  <target name="deploy.nobuild" depends="init,deploy.log4j.xml"
          description="Deploy applications to servlet container" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="deploy"  >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

<!-- ================== build.configured Target ========================
     Build configured war files but don't deploy. Use to build versions to
     be deployed elsewhere.
     =================================================================== -->

  <target name="build.configured.debug" depends="bld.all"
          description="Build configured applications" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="build.configured" >
      <property name="app.debug.val" value="9" />
    </ant>
  </target>

  <target name="build.configured" depends="bld.all"
          description="Build configured applications" >
    <ant antfile="${org.bedework.deployment.base}/build.xml" inheritrefs="true"
           target="build.configured" >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

  <!-- Copy log4j.xml to the app server but overwrite only if specified.
       Somewhat annoying to find a carefully crafted log4j.xml gets overwritten.
    -->
  <target name="deploy.log4j.xml" >
    <copy todir="${log4j.config.destination}"
          file="${org.bedework.calendar.dir}/resources/log4j.xml"
          overwrite="${org.bedework.deploy.log4j.config}" />
  </target>

  <!-- Target used to build from property files built by config tool -->
  <target name="deploy.config" >
    <copy todir="${log4j.config.destination}"
          file="${org.bedework.calendar.dir}/resources/log4j.xml"
          overwrite="${org.bedework.deploy.log4j.config}" />

    <!-- The property org.bedework.deploy.config.name must be set -->
    <ant antfile="${org.bedework.appsuite.base}/build.xml" inheritrefs="true"
           target="deploy.config"  />

    <antcall inheritrefs="true" target="deploy.caldav" />
  </target>

<!-- ==================== Dist Target ==================================
     The "dist" target creates a binary distribution of your application
     in a directory structure ready to be archived in a tar.gz or zip file.
     Note that this target depends on two others:
     * "deploy" so that the entire web application (including external
       dependencies) will have been assembled
     * "javadoc" so that the application Javadocs will have been created
     =================================================================== -->

  <target name="dist" depends="bld.all,javadoc"
          description="Create binary distribution" />

<!-- ==================== Javadoc Target ===============================
     The "javadoc" target creates Javadoc API documentation for the Java
     classes included in your application.  Normally, this is only required
     when preparing a distribution release, but is available as a separate
     target in case the developer wants to create Javadocs independently.
     =================================================================== -->

  <target name="javadoc" depends="init"
          description="Create Javadoc API documentation">

    <path id="javadoc.classpath">
      <pathelement location="${servlet.jar}"/>
      <pathelement location="${struts.jar}"/>
      <pathelement location="${fop.jar}"/>
      <pathelement location="${avalon.jar}"/>
      <pathelement location="${log4j.jar}"/>
      <pathelement location="${hibernate.jar}"/>
      <pathelement location="${ical4j.jar}"/>
      <pathelement location="${logkit.jar}"/>
      <pathelement location="${jtidy.jar}"/>
    </path>
    <mkdir dir="${dist.home}/docs/api"/>
    <javadoc sourcepath="${org.bedework.appcommon.base}/src:
                         ${org.bedework.core.base}/src:
                         ${org.bedework.caldav.base}/src:
                         ${org.bedework.caldavClientApi.base}/src:
                         ${org.bedework.calenv.base}/src:
                         ${org.bedework.calfacade.base}/src:
                         ${org.bedework.calsvc.base}/src:
                         ${org.bedework.calsvci.base}/src:
                         ${org.bedework.config.base}/src:
                         ${org.bedework.davdefs.base}/src:
                         ${org.bedework.dumprestore.base}/src:
                         ${org.bedework.http.base}/src:
                         ${org.bedework.ical.base}/src:
                         ${org.bedework.locale.base}/src:
                         ${org.bedework.logging.base}/src:
                         ${org.bedework.mail.base}/src:
                         ${org.bedework.synchml.base}/src:
                         ${org.bedework.timers.base}/src:
                         ${org.bedework.tools.base}/src:
                         ${org.bedework.uportal.base}/src:
                         ${org.bedework.webadmin.base}/src:
                         ${org.bedework.webclient.base}/src:
                         ${org.bedework.webcommon.base}/src:"
           classpathref="javadoc.classpath"
                destdir="${dist.home}/docs/api"
           packagenames="org.bedework.*,
                         edu.rpi.*"
                 access="public"
                 author="true"
                version="true"
          breakiterator="yes"
            windowtitle="${product.name} ${product.version} API Documentation">
      <doctitle><![CDATA[${product.name} ${product.version}<br/>API Documentation]]></doctitle>
      <header><![CDATA[${product.name} ${product.version}<br/>API Documentation]]></header>
    </javadoc>

  </target>

  <!-- ======================== appcommon target =======================
       This builds a jar file which provides application support.
       ================================================================= -->

  <target name="bld.appcommon"
          depends="init,bld.calsvci,bld.davdefs"
          description="Build calendar service interface classes jar">
      <ant antfile="${org.bedework.appcommon.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== calfacade target =========================
       This builds the back end facade for the core of the calendar.
       ================================================================= -->

  <target name="bld.calfacade"
          depends="init"
          description="Build calendar calfacade jars" >
      <ant antfile="${org.bedework.calfacade.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== calenv target =========================
       This builds the some environment dependent classes for the core
       of the calendar.
       ================================================================= -->

  <target name="bld.calenv"
          depends="bld.calfacade"
          description="Build calendar env jars" >
      <ant antfile="${org.bedework.calenv.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== core target =========================
       This builds the back end core of the calendar. Applications interact
       with that core through the CalFacade interface.
       ================================================================= -->

  <target name="bld.core"
          depends="bld.calfacade,bld.calenv,bld.ical"
          description="Build calendar core jars" >
      <ant antfile="${org.bedework.core.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== locale target =========================
       This builds the localization suite of the calendar.
       ================================================================= -->

  <target name="bld.locale"
          depends="init"
          description="Build calendar localization suite jars" >
      <ant antfile="${org.bedework.locale.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== davdefs target =========================
       This builds some global webdav and caldav definitions
       ================================================================= -->

  <target name="bld.davdefs"
          depends="init"
          description="Build calendar davdefs jars" >
      <ant antfile="${org.bedework.davdefs.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== http target =======================
       This builds the http-client classes jar.
       ================================================================= -->

  <target name="bld.http"
          depends="init,bld.calenv,bld.calfacade,bld.locale"
          description="Build calendar http classes jar">
      <ant antfile="${org.bedework.http.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== caldav Targets ========================
       ================================================================= -->

  <target name="bld.caldavclientapi"
          depends="init,bld.http,bld.davdefs,bld.calfacade"
          description="Build calendar caldav client api classes jar">
      <ant antfile="${org.bedework.caldavClientApi.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.caldav"
          depends="init,bld.davdefs,bld.appcommon"
          description="Build calendar caldav suite">
    <ant antfile="${org.bedework.caldav.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.caldavBexchange"
          depends="bld.caldav"
          description="Build calendar caldav exchange interface using Boeng exchange service"
          if="org.bedework.build.caldav.bexchange">
    <ant antfile="${org.bedework.caldavbexchange.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.caldavDomino"
          depends="bld.caldav"
          description="Build calendar caldav Domino interface"
          if="org.bedework.build.caldav.domino">
    <ant antfile="${org.bedework.caldavdomino.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.caldavGoogle"
          depends="bld.caldav"
          description="Build calendar caldav Google interface"
          if="org.bedework.build.caldav.google">
    <ant antfile="${org.bedework.caldavgoogle.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.caldavTest"
          depends="bld.caldav"
          description="Build caldav test suite" >
    <ant antfile="${org.bedework.caldavtest.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== logging target =======================
       This builds the logging classes jar.
       ================================================================= -->

  <target name="bld.logging"
          depends="init,bld.calfacade"
          description="Build logging classes jar">
      <ant antfile="${org.bedework.logging.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== mail target =======================
       This builds the mail classes jar.
       ================================================================= -->

  <target name="bld.mail"
          depends="init,bld.calsvci"
          description="Build calendar mail classes jar">
      <ant antfile="${org.bedework.mail.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== calsvci target =======================
       This builds the service level interface classes
       ================================================================= -->

  <target name="bld.calsvci"
          depends="init,bld.ical"
          description="Build calendar service interface classes jar">
      <ant antfile="${org.bedework.calsvci.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== calsvc target =======================
       This builds the service level interface implementation classes
       ================================================================= -->

  <target name="bld.calsvc"
          depends="init,bld.mail"
          description="Build calendar service interface implementation classes jar">
      <ant antfile="${org.bedework.calsvc.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== ical target =======================
       This builds the classes associated with ical (rfc2445 etc)
       ================================================================= -->

  <target name="bld.ical"
          depends="init,bld.locale"
          description="Build icalendar classes jar">
      <ant antfile="${org.bedework.ical.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== uportal target =======================
       This builds the uportal support classes jar.
       ================================================================= -->

  <target name="bld.uportal"
          depends="init,bld.locale"
          description="Build calendar uportal support classes jar">
      <ant antfile="${org.bedework.uportal.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== webcommon target =======================
       This builds the web common classes jar.
       ================================================================= -->

  <target name="bld.webcommon"
          depends="bld.appcommon"
          description="Build calendar web common classes jar">
      <ant antfile="${org.bedework.webcommon.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================= web client Targets ======================
       This builds the web applications jars.
       ================================================================= -->

  <target name="bld.webadmin"
          depends="init,bld.webcommon"
          description="Build calendar webadmin suite">
    <ant antfile="${org.bedework.webadmin.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="bld.webclient"
          depends="init,bld.webcommon"
          description="Build calendar webclient suite">
    <ant antfile="${org.bedework.webclient.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== synchml Targets ========================
       *
       *  NOTE: Incomplete and under development
       * The following comments map out an approach rather than document the
       * facts
       This builds the synchml library and applications.
       Many build properties are taken from the appsuite clones property files.
       To build a version for your site you should probably copy and modify the
                  appsuite/clones/democal.properties
       file and change the value of org.bedework.clone.name to the name of your
       new clone.

       To build more than  one appsuite duplicate the ant task
       invocation below with a different clone name in each.
       ================================================================= -->

  <target name="bld.synchml"
          depends="init,bld.appcommon,bld.calsvci,bld.ical,bld.calsvc,bld.webcommon"
          description="Build calendar synchml suite">
    <ant antfile="${org.bedework.synchml.base}/build.xml" inheritrefs="true"
           target="build"  >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

  <target name="bld.synchml.debug"
          depends="init,bld.appcommon,bld.calsvci,bld.ical,bld.calsvc,bld.webcommon"
          description="Build calendar synchml suite">
    <ant antfile="${org.bedework.synchml.base}/build.xml" inheritrefs="true"
           target="build" >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
      <property name="app.debug.val" value="9" />
    </ant>
  </target>

  <!-- ======================== config Target ========================
       This builds the config and deploy application
       ================================================================= -->

  <target name="bld.config"
          depends="init"
          description="Build calendar config and deploy module">
    <ant antfile="${org.bedework.config.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <!-- ======================== timers Targets ========================
       This builds some timing service classes and applications
       ================================================================= -->

  <target name="bld.timers"
          depends="init,bld.appcommon"
          description="Build calendar timed services suite">
    <ant antfile="${org.bedework.timers.base}/build.xml" inheritrefs="true"
           target="build" >
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

  <target name="bld.timers.debug"
          depends="init,bld.appcommon"
          description="Build calendar timed services suite">
    <ant antfile="${org.bedework.timers.base}/build.xml" inheritrefs="true"
           target="build" >
      <property name="app.debug.val" value="9" />
      <property name="org.bedework.clone.name" value="${org.bedework.clone.default}" />
    </ant>
  </target>

  <target name="bld.dumprestore"
          depends="init,bld.appcommon"
          description="Build calendar dumprestore suite">
    <ant antfile="${org.bedework.dumprestore.base}/build.xml" inheritrefs="true"
         target="build" />
  </target>

  <!-- ======================== tools Targets ========================
       This builds the tools

       To build more than  one appsuite duplicate the ant task
       invocation below with a different clone name in each.
       ================================================================= -->

  <target name="build.tools"
          depends="init,bld.appcommon"
          description="Build calendar tools suite">
    <ant antfile="${org.bedework.tools.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="dumpdb" depends="init">
    <ant antfile="${org.bedework.dumprestore.base}/build.xml" inheritrefs="true"
           target="dumpdb" />
  </target>

  <target name="restoredb" depends="init">
    <ant antfile="${org.bedework.dumprestore.base}/build.xml" inheritrefs="true"
           target="restoredb" />
  </target>

  <target name="restoredb-nousers" depends="init">
    <ant antfile="${org.bedework.dumprestore.base}/build.xml" inheritrefs="true"
           target="restoredb-nousers" />
  </target>

  <target name="initdb" depends="init">
    <ant antfile="${org.bedework.dumprestore.base}/build.xml" inheritrefs="true"
           target="initdb" />
  </target>

  <target name="tzconvert" depends="init">
    <ant antfile="${org.bedework.tools.base}/build.xml" inheritrefs="true"
           target="tzconvert" />
  </target>

  <!-- ======================== test target =======================
       This builds the test suite
       ================================================================= -->

  <target name="webtest.all" depends="init"
          description="Run the full webtest suite">
      <ant antfile="${org.bedework.webtest.base}/build.xml" inheritrefs="true"
           target="all" />
  </target>

  <target name="bld.test"
          depends="init,bld.core,bld.appcommon,bld.synchml"
          description="Build all calendar test jars">
      <ant antfile="${org.bedework.testsuite.base}/build.xml" inheritrefs="true"
           target="build" />
  </target>

  <target name="run.test"
          depends="init,bld.core,bld.appcommon,bld.synchml"
          description="Run JUnit tests and generate a report">
      <ant antfile="${org.bedework.testsuite.base}/build.xml" inheritrefs="true"
           target="run.unittest" />
  </target>

  <target name="bld.httptest"
          depends="init"
          description="Build calendar http test suite classes jar">
      <ant antfile="${org.bedework.testsuite.base}/build.xml" inheritrefs="true"
           target="build.httptest" />
  </target>

  <target name="run.httptest"
          depends="init"
          description="Run calendar http test suite classes jar">
    <!-- Define location of run-time env.properties -->
    <property name="uwcal.env.properties.root"
              location="${uwcal.test.env.properties.root}" />

      <ant antfile="${org.bedework.testsuite.base}/build.xml" inheritrefs="true"
           target="run.httptest" />
  </target>

  <target name="synchmltest"
          depends="bld.test"
          description="Run calendar synchml test">
    <!-- Define location of run-time env.properties -->
    <property name="uwcal.env.properties.root"
              location="${uwcal.test.env.properties.root}" />

    <ant antfile="${org.bedework.testsuite.base}/build.xml" inheritrefs="true"
         target="synchmltest" />
  </target>

  <!-- ======================== schema target =======================
       This builds the ddl from the hibernate schema
       ================================================================= -->

  <target name="schema" depends="init"
          description="Generate schema from mapping files">
    <echo message="Creating a schema is also available from the generated stand-alone" />
    <echo message="scripts using the 'schema' or 'schema-export' parameter" />

    <input message="text only? no will update db with new schema "
           validargs="yes,no"
           addproperty="schema.text.only" />

    <property name="schema.run.base"
              location="${org.bedework.temp.home}/schema"/>
    <property name="schema.run.resources"
              location="${schema.run.base}/resources"/>

    <delete dir="${schema.run.resources}" />
    <mkdir dir="${schema.run.resources}" />
    <copy tofile="${schema.run.resources}/log4j.xml"
          file="${org.bedework.testsuite.base}/resources/log4j.xml" />
    <property name="org.bedework.schema.hibernate.properties"
              location="${org.bedework.testsuite.base}/resources/hibernate.properties" />
    <copy tofile="${schema.run.resources}/hibernate.properties"
          file="${org.bedework.schema.hibernate.properties}" />

          <!--
    <property name="org.bedework.hibernate.schema.properties"
              location="${schema.run.resources}/hibernate.properties" />
              -->

    <mkdir dir="${schema.run.resources}/hbms" />
    <copy todir="${schema.run.resources}/hbms" >
      <fileset dir="${org.bedework.core.base}/resources/hbms">
        <include name="*.hbm.xml"/>
      </fileset>
    </copy>

    <path id="schema.cp">
      <!-- Include any local jdbc drivers -->
      <fileset dir="${org.bedework.jdbc.lib}">
         <include name="**/*.jar"/>
      </fileset>

      <!-- Include the quickstart jdbc driver -->
      <pathelement location="${hsqldb.jdbcdriver.jar}"/>

      <!-- Need the hibernate stuff -->
      <fileset dir="${hibernate.jars.dir}">
         <include name="**/*.jar"/>
      </fileset>
      <pathelement location="${log4j.jar}"/>

      <!-- for commons stuff -->
      <fileset dir="${struts.dir}">
         <include name="commons*.jar"/>
      </fileset>

      <!-- Need the classes we are trying to persist -->
      <pathelement location="${org.bedework.access.jar}"/>
      <pathelement location="${org.bedework.calfacadeshared.jar}"/>

      <!-- The xml schema files -->
      <pathelement location="${org.bedework.core.base}/resources"/>
      <pathelement location="${schema.run.resources}"/>
      <pathelement location="${schema.run.resources}/hbms"/>
      <pathelement location="${schema.run.resources}/hibernate.properties"/>
    </path>

    <copy todir="${schema.run.resources}/hbms"
          file="${org.bedework.core.base}/resources/properties/hibernate.cfg.xml" />

    <property name="cp" refid="schema.cp" />
    <echo message="***************cp: ${cp}"/>

    <taskdef name="schemaexport"
             classname="org.hibernate.tool.hbm2ddl.SchemaExportTask">
      <classpath refid="schema.cp"/>
    </taskdef>

    <!-- text="no" causes task to create db. Requires db system to be running
         and jdbc drivers on class path
         -->
    <schemaexport properties="${schema.run.resources}/hibernate.properties"
                  quiet="no"
                  text="${schema.text.only}"
                  drop="no"
                  delimiter=";"
                  output="schema-export.sql"
                  config="${schema.run.resources}/hbms/hibernate.cfg.xml">
    </schemaexport>
  </target>

<!-- ===================== Quickstart target ===============================
     The "quickstart.build" target 'builds' quickstart by copying particular
     files into the quickstart directory.  We assume quickstart consists of
     a directory containing 4 subdirectories:  tomcat, hsqldb, ant, and
     this one (calendar3), along with the 3 ant executable files.  This
     target copies files from calendar3 into the quickstart and tomcat
     directories to create a calendar version that works out of the box
     (once ant deploy is run).
     =================================================================== -->

  <target name="quickstart.build" depends="init"
          description="copy files to quickstart directories">

    <property name="quickstart.files.dir"
              location="${org.bedework.calendar.dir}/quickstartFiles"/>

    <copy todir="${org.bedework.appserver.dir}/conf" overwrite="yes">
       <fileset dir="${quickstart.files.dir}/tomcat.conf" />
    </copy>

    <copy todir="${org.bedework.calendar.dir}/.." overwrite="yes">
       <fileset dir="${quickstart.files.dir}/root" />
    </copy>
  </target>

  <!-- Create a version using acegi security
    -->
  <target name="quickstart.acegi.build" depends="init"
          description="copy files to quickstart directories">

    <property name="quickstart.files.dir"
              location="${org.bedework.calendar.dir}/quickstartFiles"/>

    <copy todir="${org.bedework.appserver.dir}/common/lib" overwrite="yes">
       <fileset dir="${org.bedework.calendar.dir}/lib/acegi"
                excludes="acegi-security-catalina-server.jar" />
    </copy>

    <copy todir="${org.bedework.appserver.dir}/server/lib" overwrite="yes">
       <fileset dir="${org.bedework.calendar.dir}/lib/acegi"
                includes="acegi-security-catalina-server.jar" />
    </copy>

    <copy tofile="${org.bedework.appserver.dir}/conf/server.xml" overwrite="yes"
          file="${quickstart.files.dir}/tomcat.conf/server.acgi.xml" />

    <copy tofile="${org.bedework.appserver.dir}/conf/acegisecurity.xml" overwrite="yes"
          file="${quickstart.files.dir}/tomcat.conf/acegisecurity.xml" />

    <copy todir="${org.bedework.calendar.dir}/.." overwrite="yes">
       <fileset dir="${quickstart.files.dir}/root" />
    </copy>
  </target>
</project>

<?xml version="1.0"?>
<!DOCTYPE hibernate-mapping PUBLIC
  "-//Hibernate/Hibernate Mapping DTD//EN"
  "http://hibernate.sourceforge.net/hibernate-mapping-3.0.dtd">

<!-- ===================================================================
     Calendar classes. This is a tree of filters, each being a subclass
     of org.bedework.calfacade.filter.FilterVO.

     The actual subclass is determined by the type field:
     type  filter
      U    unknown,
      K    category,
      L    location,
      S    sponsor,
      C    creator,
      A    'and' (of its children),
      O    'or' (of its children),
      N    'not' (of the referenced calendar)
      a    'alias' (of another calendar [i.e., if a calendar needs to be
           the child of two parents)

      Note also that filters hang around across hibernate sessions so we
      must fetch all data - no lazy initialisation here
     =================================================================== -->

<hibernate-mapping>
  <class name="org.bedework.calfacade.filter.BwFilter"
         discriminator-value="U"
         table="filters">
    <id name="id" type="integer" column="filterid" unsaved-value="-1">
      <generator class="native"/>
    </id>

    <discriminator column="type" type="char" />

    <property name="name" type="string" >
      <column name="filtername" length="200" />
    </property>

    <property name="description" type="string" >
      <column name="description" length="500" />
    </property>

    <property name="not" type="true_false"
              column="negated" not-null="true" />

    <many-to-one name="owner"
                 class="org.bedework.calfacade.BwUser"
                 unique="true" >
      <column name="ownerid" not-null="true" index="calowner" />
    </many-to-one>

    <property name="publick" type="true_false"
              column="publick" not-null="true"
              index="calpub" />

    <many-to-one name="parent"
                 class="org.bedework.calfacade.filter.BwFilter">
      <column name="parent" />
    </many-to-one>

    <!-- This commented out section is sort of what I wanted. The intent is
         that, if we had a location filter we would automatcally fetch the
         associated location.

         However, because each sub-class used the same column for the
         foreign key we get constraint violations when the value is non-null
         and has the same value as a non-existant row in one or other of
         the reffed tables.

         The <join> element in hib3 might offer a solution. There might
         also be some other way of explicitly defining queries based on the
         discriminator value. For the time being have a separate column per
         entity type.
    <subclass
        name="org.bedework.calfacade.filter.BwCategoryFilter"
        discriminator-value="K" >
      <many-to-one name="category"
                   class="org.bedework.calfacade.BwCategory" >
        <column name="ref_num" />
      </many-to-one>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwLocationFilter"
        discriminator-value="L" >
      <many-to-one name="location"
                   class="org.bedework.calfacade.BwLocation" >
        <column name="ref_num" />
      </many-to-one>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwSponsorFilter"
        discriminator-value="S" >
      <many-to-one name="sponsor"
                   class="org.bedework.calfacade.BwSponsor" >
        <column name="ref_num" />
      </many-to-one>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwCreatorFilter"
        discriminator-value="C" >
      <many-to-one name="creator"
                   class="org.bedework.calfacade.BwUser">
        <column name="ref_num" />
      </many-to-one>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwAndFilter"
        discriminator-value="A" >
      <set name="children" inverse="true" cascade="all-delete-orphan"
           order-by="filtername"  >
        <key column="parent" />
        <one-to-many class="org.bedework.calfacade.filter.BwFilter" />
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwOrFilter"
        discriminator-value="O" >
      <set name="children" inverse="true" cascade="all-delete-orphan"
           order-by="filtername" >
        <key column="parent" />
        <one-to-many class="org.bedework.calfacade.filter.BwFilter" />
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwNotFilter"
        discriminator-value="N" >
      <many-to-one name="filter"
                   class="org.bedework.calfacade.filter.BwFilter" >
        <column name="ref_num" />
      </many-to-one>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwAliasFilter"
        discriminator-value="a" >
      <many-to-one name="target"
                   class="org.bedework.calfacade.filter.BwFilter" >
        <column name="ref_num" />
      </many-to-one>
    </subclass>
         -->
    <subclass
        name="org.bedework.calfacade.filter.BwNotFilter"
        discriminator-value="N" >
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwCategoryFilter"
        discriminator-value="K" >
      <set name="entities" table="filter_categories"
           lazy="true"
           cascade="all" >
        <key column="filterid"/>
        <many-to-many class="org.bedework.calfacade.BwCategory"
                      column="categoryid"/>
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwLocationFilter"
        discriminator-value="L" >
      <set name="entities" table="filter_locations"
           lazy="true"
           cascade="all" >
        <key column="filterid"/>
        <many-to-many class="org.bedework.calfacade.BwLocation"
                      column="locationid"/>
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwSponsorFilter"
        discriminator-value="S" >
      <set name="entities" table="filter_sponsors"
           lazy="true"
           cascade="all" >
        <key column="filterid"/>
        <many-to-many class="org.bedework.calfacade.BwSponsor"
                      column="sponsorid"/>
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwCreatorFilter"
        discriminator-value="C" >
      <set name="entities" table="filter_creators"
           lazy="true" >
        <key column="filterid"/>
        <many-to-many class="org.bedework.calfacade.BwUser"
                      column="creatorid"/>
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwAndFilter"
        discriminator-value="A" >
      <set name="children" inverse="true" cascade="all-delete-orphan"
           order-by="filtername"  >
        <key column="parent" />
        <one-to-many class="org.bedework.calfacade.filter.BwFilter" />
      </set>
    </subclass>
    <subclass
        name="org.bedework.calfacade.filter.BwOrFilter"
        discriminator-value="O" >
      <set name="children" inverse="true" cascade="all-delete-orphan"
           order-by="filtername" >
        <key column="parent" />
        <one-to-many class="org.bedework.calfacade.filter.BwFilter" />
      </set>
    </subclass>
  </class>
</hibernate-mapping>

